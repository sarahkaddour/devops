{"version":3,"sources":["components/Footer.js","components/Dialogs/CreatePlayerDialog.js","components/Players.js","components/HomePage.js","App.js","serviceWorker.js","index.js"],"names":["Footer","className","Component","CreatePlayerDialog","props","state","username","firstname","lastname","team","onChange","bind","onSubmit","config","method","url","data","axios","then","response","status","console","log","catch","err","setState","error","message","e","preventDefault","this","postRequest","toggle","target","name","value","disabled","Modal","isOpen","backdrop","ModalHeader","ModalBody","Form","FormGroup","FormLabel","htmlFor","FormControl","id","placeholder","as","ModalFooter","style","textAlign","Button","variant","onClick","Players","closeCreatePlayerDialog","shouldOpenCreatePlayerModal","handleAfterRequest","loggedIn","players","selected","handleOnSelect","openCreatePlayerDialog","deletePlayerRequest","getPlayersRequest","getPlayers","getAllPlayers","deletePlayers","headers","row","selectRow","mode","clickToSelect","onSelect","backgroundColor","keyField","remote","columns","dataField","text","striped","hover","deleteRow","noDataIndication","Row","margin","Col","width","aria-hidden","PureComponent","HomePage","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.dda94918.chunk.js","sourcesContent":["import React, {Component} from 'react';\r\n\r\nclass Footer extends Component {\r\n  render() {\r\n\r\n    return (\r\n      <div className=\"Footer\">\r\n        <p>Céline BENIDDIR & Sarah KADDOUR ♥ </p>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Footer;","import React, { Component } from 'react';\r\nimport {Button, Form, FormGroup, FormLabel, FormControl } from 'react-bootstrap';\r\nimport {Modal, ModalHeader, ModalBody, ModalFooter} from 'reactstrap';\r\nimport axios from 'axios';\r\n\r\n\r\nexport default class CreatePlayerDialog extends Component {\r\n    constructor(props){\r\n        super(props)\r\n        this.state = {\r\n          username: '',\r\n          firstname: '',\r\n          lastname: '',\r\n          team: '',\r\n        }\r\n        this.onChange = this.onChange.bind(this);\r\n        this.onSubmit = this.onSubmit.bind(this);\r\n      }\r\n\r\n      async postRequest(username, firstname, lastname, team) {\r\n        const config = {\r\n          method: 'post',\r\n          url: 'http://localhost:8000/user/',\r\n          data: {\r\n            username: username,\r\n            firstname: firstname,\r\n            lastname: lastname,\r\n            team: team\r\n          },\r\n      }\r\n\r\n        return await axios(config)\r\n        .then((response) => {\r\n          if(response.status === 200){\r\n            console.log('Player added');\r\n          } \r\n        })\r\n        .catch((err) => {\r\n          console.log('error Player');\r\n          this.setState({ error: err.message });\r\n        });\r\n      }\r\n\r\n      async onSubmit(e){\r\n        e.preventDefault();\r\n        const { username, firstname, lastname, team } = this.state;\r\n        console.log(username, firstname, lastname, team);\r\n        this.postRequest(username, firstname, lastname, team);\r\n        this.props.toggle();\r\n      }\r\n    \r\n      onChange(e){\r\n        this.setState({\r\n          [e.target.name]: e.target.value\r\n        })\r\n      }\r\n\r\n    render(){\r\n      const { username, firstname, lastname, team } = this.state;\r\n      const disabled = !username || !firstname || !lastname || !team;\r\n\r\n        return(\r\n            <Modal isOpen toggle={this.props.toggle} backdrop={true}>\r\n              <ModalHeader toggle={this.props.toggle}> Add a new player </ModalHeader>\r\n              <ModalBody>\r\n                <Form\r\n              className=\"sign-up-form\"\r\n              onSubmit={this.onSubmit}\r\n            >\r\n              <FormGroup>\r\n                  <FormLabel htmlFor=\"username\">Username</FormLabel>\r\n                  <FormControl\r\n                    name=\"username\"\r\n                    id=\"username\"\r\n                    placeholder=\"johnd75\"\r\n                    value={this.state.username}\r\n                    onChange={this.onChange}\r\n                  />\r\n                </FormGroup>\r\n                <FormGroup>\r\n                  <FormLabel htmlFor=\"firstname\">Firstname</FormLabel>      \r\n                  <FormControl\r\n                    name=\"firstname\"\r\n                    id=\"firstname\"\r\n                    placeholder=\"John\"\r\n                    value={this.state.firstname}\r\n                    onChange={this.onChange}\r\n                  />\r\n                </FormGroup>\r\n                <FormGroup>\r\n                  <FormLabel htmlFor=\"lastname\">Lastname</FormLabel>      \r\n                  <FormControl\r\n                    name=\"lastname\"\r\n                    id=\"lastname\"\r\n                    placeholder=\"Doe\"\r\n                    value={this.state.lastname}\r\n                    onChange={this.onChange}\r\n                  />\r\n                </FormGroup>\r\n                <FormGroup>\r\n                  <FormLabel htmlFor=\"team\">Team</FormLabel>\r\n                      <FormControl\r\n                      as=\"select\"\r\n                      id=\"team\"\r\n                      name=\"team\"\r\n                      value={this.state.team}\r\n                      onChange={this.onChange}\r\n                      >\r\n                          <option value=\"Blue\">Blue</option>\r\n                          <option value=\"Red\">Red</option>\r\n                          <option value=\"Green\">Green</option>\r\n                          <option value=\"Yellow\">Yellox</option>\r\n                      </FormControl>\r\n                </FormGroup>\r\n            </Form>\r\n              </ModalBody>\r\n            \r\n              <ModalFooter style={{textAlign: 'center'}}>\r\n                <Button variant=\"danger\" onClick={this.props.toggle}>Cancel</Button>\r\n                <Button variant=\"success\" disabled={disabled} onClick={this.onSubmit}>Save</Button>\r\n              </ModalFooter>\r\n            </Modal>\r\n        );\r\n    }\r\n  };\r\n    \r\n","import React, { PureComponent, Fragment} from 'react';\r\nimport axios from 'axios';\r\nimport { Button, Row, Col } from 'react-bootstrap';\r\nimport BootstrapTable from 'react-bootstrap-table-next';\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\nimport CreatePlayerDialog from './Dialogs/CreatePlayerDialog';\r\n\r\nexport default class Players extends PureComponent {\r\n\r\n  constructor(props){\r\n    super(props)\r\n    this.state = {\r\n      loggedIn: true,\r\n      players: [],\r\n      selected: null,\r\n      shouldOpenCreatePlayerModal: false,\r\n    }\r\n    this.handleOnSelect = this.handleOnSelect.bind(this);\r\n    this.openCreatePlayerDialog = this.openCreatePlayerDialog.bind(this);\r\n    this.deletePlayerRequest = this.deletePlayerRequest.bind(this);\r\n  }\r\n\r\n  componentDidMount(){\r\n    this.getPlayersRequest();\r\n  }\r\n\r\n  async getPlayersRequest() {\r\n    const getPlayers = {\r\n      method: 'get',\r\n      url: `http://localhost:8000/`,\r\n    };\r\n\r\n    return await axios(getPlayers)\r\n    .then((response) => {\r\n       this.getAllPlayers(response.data);\r\n    })\r\n    .catch((err) => {\r\n      console.log(err.message);\r\n    });\r\n  }\r\n  async deletePlayerRequest() {\r\n    let username = this.state.selected.username;\r\n    const deletePlayers = {\r\n      method: 'delete',\r\n      url: `http://localhost:8000/user/${username}`,\r\n      headers: { 'Content-Type': 'application/json'},\r\n  }\r\n    return await axios(deletePlayers)\r\n    .then((response) => {\r\n      console.log(\"Player deleted\");\r\n      this.handleAfterRequest();\r\n    })\r\n    .catch((err) => {\r\n      console.log(err.message);\r\n    });\r\n  }\r\n  \r\n  getAllPlayers(players){\r\n    this.setState({ players: players });\r\n  }\r\n\r\n  handleOnSelect(row){\r\n    this.setState({\r\n      selected: row,\r\n    });\r\n}\r\n\r\n  handleAfterRequest(){\r\n    this.getPlayersRequest();\r\n  }\r\n\r\n    openCreatePlayerDialog(){\r\n      this.setState({\r\n        shouldOpenCreatePlayerModal: true,\r\n      });\r\n    }\r\n\r\n    closeCreatePlayerDialog = () => {\r\n        this.setState({\r\n            shouldOpenCreatePlayerModal: false,\r\n        });\r\n        console.log('create request');\r\n        this.handleAfterRequest();\r\n        console.log('create request');\r\n\r\n      }\r\n\r\nrender(){\r\n  const players = this.state.players;\r\n  const columns = [{\r\n    dataField: 'username',\r\n    text: 'Username'\r\n  }, {\r\n    dataField: 'firstname',\r\n    text: 'Firstname'\r\n  }, {\r\n    dataField: 'lastname',\r\n    text: 'Lastname'\r\n  }, {\r\n    dataField: 'team',\r\n    text: 'Team'\r\n  }];\r\n\r\n  const { shouldOpenCreatePlayerModal, selected} = this.state;\r\n  const selectRow = {\r\n    mode: 'radio',\r\n    clickToSelect: true,\r\n    onSelect: this.handleOnSelect,\r\n    style: { backgroundColor: '#dc3545' }\r\n  };\r\n  const disabled = !selected;\r\n  return(\r\n    <Fragment>\r\n        {shouldOpenCreatePlayerModal ? <CreatePlayerDialog toggle={this.closeCreatePlayerDialog}/>: null}\r\n        <div className=\"homepage\">\r\n            <h1>Players</h1>\r\n            <BootstrapTable \r\n                className = 'table'\r\n                keyField='id'\r\n                remote={ true }\r\n                data={ players } \r\n                columns={ columns }\r\n                striped\r\n                hover\r\n                selectRow={ selectRow }\r\n                deleteRow={ true }\r\n                noDataIndication = 'No players'\r\n            />\r\n\r\n            <Row style={{ margin:'5px'}}>\r\n              <Col>\r\n                <Button style={{width: 300}} variant=\"success\" onClick={this.openCreatePlayerDialog}><i className=\"fa fa-plus\" aria-hidden=\"true\"></i> Add a new player </Button>\r\n              </Col>\r\n              <Col>\r\n                <Button style={{width: 300}} variant=\"danger\" disabled={disabled} onClick={this.deletePlayerRequest}><i className=\"fa fa-trash\" aria-hidden=\"true\"></i> Delete a player </Button>\r\n              </Col>\r\n            </Row>\r\n        </div>\r\n    </Fragment>\r\n  );\r\n}\r\n}","\r\nimport React, { Component } from 'react';\r\nimport Footer from './Footer';\r\nimport Players from './Players';\r\nimport '../App.css';\r\n\r\n\r\nclass HomePage extends Component {\r\n  render() {\r\n    return (\r\n      <div id=\"parent\">\r\n        <Players/>\r\n        <Footer/>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default HomePage;","import React, { Component } from 'react';\r\nimport HomePage from './components/HomePage';\r\n\r\nimport './App.css';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\n\r\n\r\nclass App extends Component {\r\n  \r\n  render(){\r\n    return (\r\n      <div className=\"App\">\r\n        <HomePage/>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}